count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destinationation_id, y_1, y_2, y_3, y_4, y_5)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds)
load("/Users/alexpapiu/Documents/Data/expedia.RData")
truth = as.list(val$hotel_cluster) #we need this for the validation
#top clusters for given feature:
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
#0.2041625 on the 20k validation set.
#0.2380215 on the 100k test set.
View(top_5)
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(hotel_continent, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "hotel_continent") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
# 0.3121058
names(train)
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(user_location_city, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "user_location_city") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(is_package, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(is_package, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "is_package") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
nameS(train)
names(train)
train %>%
count(is_booking, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(is_booking, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "is_booking") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
3 + NA
3 + NULL
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(hotel_continent, hotel_cluster) %>%
select(is_booking, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "hotel_continent") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(hotel_continent, hotel_cluster) %>%
select(is_booking, y_1, y_2, y_3, y_4, y_5) -> top_5
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(hotel_continent, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "hotel_continent") -> temp
preds <- temp[,2:6]
View(preds)
preds_continent <- temp[,2:6]
View(preds_continent)
library(xgboost)
train %>%
transmute(is_mobile,
is_package,
is_booking,
posa_continent = as.factor(posa_continent),
hotel_continent = as.factor(hotel_continent),
srch_destination_type_id =
as.factor(srch_destination_type_id),
srch_rm_cnt,
srch_adults_cnt) -> new_train
X <- model.matrix(~., data = new_train)
y <- as.numeric(train$hotel_cluster) - 1
model_xgb <- xgboost(X, y, nrounds = 30,
objective = "multi:softprob",
num_class = 100)
range(y)
y <- as.numeric(train$hotel_cluster)
model_xgb <- xgboost(X, y, nrounds = 30,
objective = "multi:softprob",
num_class = 100)
train %>%
transmute(#is_mobile,
#is_package,
#is_booking,
#posa_continent = as.factor(posa_continent),
hotel_continent = as.factor(hotel_continent)) -> new_train
X <- model.matrix(~., data = new_train)
y <- as.numeric(train$hotel_cluster)
model_xgb <- xgboost(X, y, nrounds = 30,
objective = "multi:softprob",
num_class = 100)
val %>% transmute(hotel_continent = as.factor(hotel_continent)) -> new_val
X_val = model.matrix(~., data = new_val)
predict(model_xgb, X_val)
predict(model_xgb, X_val) -> predictions
solution <- t(matrix(predictions, nrow = 100))
View(solution)
which.max(solution[1,])
?which.max
colnames(X)
colnames(solution)
solution[1,] %>% sort()
solution[1,] %>% sort(decreasing = TRUE)
sort(solution[1,], decreasing = TRUE)[1:5]
sort(solution[1,], decreasing = TRUE)[1:5] -> top5
solution[1,] %in% top5
which(solution[1,] %in% top5)
solution[1,]
top_5
top5
solution[1,]
1:100
tostring(1:100)
toString(1:100)
dim(solution)
colnames(solution)  <- "1"
colnames(solution)  <- 1:100
colnames(solution)
solution[1,]
sort(solution[1,], decreasing = TRUE)[1:5]
sort(solution[1,], decreasing = TRUE)[1:5] %>% names()
sort(solution[1,], decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
apply(solution, 1, function(x) {
sort(x, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()})
sort(x, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()}) -> xgb_preds
apply(solution, 1, function(x) {
sort(x, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()}) -> xgb_preds
View(xgb_preds)
apply(solution, 1, function(x) {
sort(x, decreasing = TRUE)[1:5] %>% names() %>% list(as.numeric())}) -> xgb_preds
xgb_preds
apply(solution, 1, function(x) {
sort(x, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()}) -> xgb_preds
as.list(as.data.frame(xgb_preds)) -xgb_preds #converts to a list
as.data.frame(xgb_preds)
as.list(as.data.frame(xgb_preds)) ->xgb_preds #converts to a list
xgb_preds[[1]]
xgb_preds
mapk(5, truth, xgb_preds) #the metric for the competition
#top clusters for given feature:
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(hotel_continent, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "hotel_continent") -> temp
preds_continent <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
mapk(5, truth, xgb_preds) #the metric for the competition
train %>%
transmute(is_mobile,
is_package,
#is_booking,
#posa_continent = as.factor(posa_continent),
hotel_continent = as.factor(hotel_continent)) -> new_train
dim(X)
dim(X_vla)
dim(X_val)
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_type_id, y_1, y_2, y_3, y_4, y_5) -> top_5
right_join(top_5, val, by = "srch_destination_type_id") -> temp
preds <- temp[,2:6]
View(preds)
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_type_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_type_id") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
load("/Users/alexpapiu/Documents/Data/expedia.RData")
truth = as.list(val$hotel_cluster) #we need this for the validation
#top clusters for given feature:
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(hotel_continent, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "hotel_continent") -> temp
preds_continent <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_type_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_type_id") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
names(train)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
mapk(5, truth, preds) #the metric for the competition
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
preds[,2:5] <- preds_continent[,1:4]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
is.na(preds)
is.na(preds)[1:10]
range(preds)
range(train$hotel_cluster)
preds[10]
preds[10,]
preds_continent[10,]
preds[is.na[preds]]
preds[is.na(preds)]
is.na(preds)
preds[is.na(preds)]
preds[is.na(preds),]
nrow(preds)
preds[1,]
preds[10,]
preds[10,]
row1 <- preds[10,]
row1[is.na(row1)]
is.na(row1)
row1[is.na(row1)]
row1[is.na(row1)] <- preds_continent_10[is.na(row1)]
row2 <- preds_continent[10,]
row2
row1[is.na(row1)] <- row2[is.na(row1)]
row1
sapply(1:nrow(preds), function(x) {
row1 <- preds[i,]
row2 <- preds_continent[i,]
row1[is.na(row1)] <- row2[is.na(row1)]
preds[i, ] <- row1
})
sapply(1:nrow(preds), function(i) {
row1 <- preds[i,]
row2 <- preds_continent[i,]
row1[is.na(row1)] <- row2[is.na(row1)]
preds[i, ] <- row1
})
sapply(1:nrow(preds), function(i) {
row1 <- preds[i,]
row2 <- preds_continent[i,]
row1[is.na(row1)] <- row2[is.na(row1)]
}) -> new_pred
sapply(1:nrow(preds), function(i) {
row1 <- preds[i,]
row2 <- preds_continent[i,]
row1[is.na(row1)] <- row2[is.na(row1)]
preds[i,] <- row1
})
preds_vect <- as.numeric(preds)
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
preds_vect <- as.numeric(preds)
View(preds)
preds <- as.matrix(temp[,2:6])
preds_vect <- as.numeric(preds)
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
preds_vect <- as.numeric(as.matrix(preds)))
preds_vect <- as.numeric(as.matrix(preds))
preds_cont_vect <- as.numeric(as.matrix(preds_continent))
preds_vect[is.na(preds_vect)]
is.na(preds_vect)
preds_vect[is.na(preds_vect)] <- preds_cont_vect[is.na(preds_vect)]
preds <- matrix(preds_vect, nrow = nrow(temp))
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(user_location_city, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "user_location_city") -> temp
preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
preds_vect <- as.numeric(as.matrix(preds))
preds_cont_vect <- as.numeric(as.matrix(preds_city))
preds_vect[is.na(preds_vect)] <- preds_cont_vect[is.na(preds_vect)]
preds <- matrix(preds_vect, nrow = nrow(temp))
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
View(preds)
#replace NA's with the continent vote:
preds_vect <- as.numeric(as.matrix(preds))
preds_cont_vect <- as.numeric(as.matrix(preds_city))
preds_vect[is.na(preds_vect)] <- preds_cont_vect[is.na(preds_vect)]
preds <- matrix(preds_vect, nrow = nrow(temp))
View(preds)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n)
presidents[1:30]
president
presidents
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(hotel_continent, y_1, y_2, y_3, y_4, y_5) -> top_5
right_join(top_5, val, by = "hotel_continent") -> temp
preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <- temp[,2:6]
dim(preds)
sum(is.na(preds))
#replace NA's with the continent vote:
preds_vect <- as.numeric(as.matrix(preds))
preds_vect[1:10]
mapk(5, list(1), list(c(2,3,1,1,1)))
preds_vect[is.na(preds_vect)]
sample(100)
preds_cont_vect[is.na(preds_vect)]
preds_cont_vect <- as.numeric(as.matrix(preds_city))
preds_cont_vect[is.na(preds_vect)]
mapk(5, truth, preds) #the metric for the competition
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
preds_vect[is.na(preds_vect)] <- preds_cont_vect[is.na(preds_vect)]
preds <- matrix(preds_vect, nrow = nrow(temp))
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
names(train)
train %>%
filter(!is.na(orig_destination_distance))
train %>%
filter(!is.na(orig_destination_distance)) -> train_small
train_small %>%
count(dist_bin, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) -> top_5
dat <- as.data.table(top_5)
dat[, obs := paste0('y_', 1:.N), by=dist_bin]
dcast(dat, dist_bin ~ obs, value.var="hotel_cluster") -> top_5
right_join(top_5, train_small, by = "dist_bin") -> temp
temp <- temp[,2:6]
as.list(as.data.frame(t(temp))) -> preds #converts to a list
truth = as.list(train_small$hotel_cluster)
mapk(5, truth, preds)
train_small %>%
count(dist_bin, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) -> top_5
temp <- read.csv("/Users/alexpapiu/Documents/Data/speed-dating-experiment/Speed\ Dating\ Data.csv",
stringsAsFactors = FALSE)
View(temp)
