arrange(desc(n))
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n))
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n))
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n)
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0)
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
dim(hotel_continent)
dim(srch_destination_id)
data <- rbind(hotel_continent, srch_destination_id)
data <- rbind(hotel_continent, srch_destination_id)
View(hotel_continent)
View(srch_destination_id)
dim(srch_destination_id)
data <- rbind(hotel_continent[,-1], srch_destination_id[,-1])
View(data)
hotel_continent[,-1]
hotel_continent[1,]
hotel_continent[,1]
ncol(hotel_continent)
hotel_continent[,2:ncol(hotel_continent)]
2:ncol(hotel_continent)
hotel_continent[,2:ncol(hotel_continent)]
colnames(hotel_continent)
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_2 = as.matrix(select(srch_destination_id, - srch_destination_id))
data <- cbind(X_1, X_2)
data <- rbind(X_1, X_2)
View(data)
data <- data.frame(rbind(X_1, X_2))
names(data)
names(train)
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_type_id
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_2 = as.matrix(select(srch_destination_id, - srch_destination_id))
data <- data.frame(rbind(X_1, X_2))
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_2 = as.matrix(select(srch_destination_id, - srch_destination_id))
data <- data.frame(rbind(X_1, X_2))
rowmeans()
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_2 = as.matrix(select(srch_destination_id, - srch_destination_id))
data <- data.frame(rbind(X_1, X_2))
X_1 = as.matrix(select(hotel_continent, - hotel_continent))
X_2 = as.matrix(select(srch_destination_id, - srch_destination_type_id))
data <- data.frame(rbind(X_1, X_2))
View(data)
names(srch_destination_id)
rowMeans(data)
rowSums(data)
data/rowSums(data)
data/rowSums(data) -> frac_data
View(frac_data)
frac_data[1,] + frac_data[10,]
2*frac_data[1,] + frac_data[10,]
2*frac_data[1,] + frac_data[10,] %>% sort()
2*frac_data[1,] + frac_data[10,] %>% sort(decreasing = TRUE)
2*frac_data[1,] + frac_data[10,] -> counts
View(counts)
2*frac_data[1,] + frac_data[10,] %>% as.numeric()
2*frac_data[1,] + frac_data[10,] %>% as.numeric() -> counts
View(counts)
names(counts)
sort(counts)
sort(counts, decreasing = TRUE)
sort(counts, decreasing = TRUE)[1:5] %>% names()
names(frac_data)
names(frac_data) = 0:99
2*frac_data[1,] + frac_data[10,] %>% as.numeric() -> counts
sort(counts, decreasing = TRUE)[1:5] %>% names()
sort(counts, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
2+2
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0)
View(val)
small_val <- select(val, hotel_continent, srch_destination_id)
View(small_val)
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0)
small_val <- right_join(small_val, hotel_continent, by = "hotel_continent")
train %>%
count(srch_destination_type_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val <- right_join(small_val, srch_destination_id,
by = "srch_destination_id")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val <- right_join(small_val, srch_destination_id,
by = "srch_destination_id")
small_val <- select(val, hotel_continent, srch_destination_id)
small_val_cont <- right_join(small_val, hotel_continent, by = "hotel_continent")
small_val_srch_id <- right_join(small_val, srch_destination_id,
by = "srch_destination_id")
View(srch_destination_id)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- left_join(small_val, srch_destination_id,
by = "srch_destination_id")
small_val <- select(val, hotel_continent, srch_destination_id)
#top counts for different variables:
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
View(hotel_continent)
small_val_cont <- right_join(hotel_continent, small_val,
by = "hotel_continent")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- left_join(srch_destination_id, small_val,
by = "srch_destination_id")
View(small_val_cont)
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- right_join(srch_destination_id, small_val,
by = "srch_destination_id")
View(small_val_srch_id)
X_1 = as.matrix(select(small_val_cont, - hotel_continent))
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id))
data <- data.frame(rbind(X_1, X_2))
View(X_1)
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
dim(X_1)
dim(X_2)
X_1[1,]
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id))
X_1 = as.matrix(select(small_val_cont, - hotel_continent))
X_1[1,]
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "hotel_continent")
View(small_val_cont)
names(small_val_srch_id)
X_1 = as.matrix(select(small_val_cont, - hotel_continent, srch_destination_id))
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id, hotel_continent))
dim(X_1
)
colnames(X_1)
X_1 = as.matrix(select(small_val_cont, - hotel_continent, srch_destination_id))[,1:100]
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id, hotel_continent))[,1:100]
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
colnames(X_1)
dim(X_1)
i = 5
X_1[i] +X_2[i]
X_1[i,] +X_2[i,]
count = X_1[i,] +X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
})
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 3*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
train %>%
count(hotel_continent, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "hotel_continent")
View(small_val_cont)
View(small_val_srch_id)
View(X_1)
View(X_2)
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 10*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 100*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 2*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "hotel_continent")
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n))
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0)
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(user_location_city, small_val,
by = "hotel_continent")
small_val_cont <- right_join(hotel_continent, small_val,
by = "user_location_city")
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "user_location_city")
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
View(hotel_continent)
colnames(small_val)
small_val <- select(val, hotel_continent, user_location_city)
#top counts for different variables:
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "user_location_city")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- right_join(srch_destination_id, small_val,
by = "srch_destination_id")
small_val <- select(val, srch_destination_id, user_location_city)
#top counts for different variables:
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "user_location_city")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- right_join(srch_destination_id, small_val,
by = "srch_destination_id")
X_1 = as.matrix(select(small_val_cont, - hotel_continent, srch_destination_id))[,1:100]
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id, hotel_continent))[,1:100]
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 2*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
X_1 = as.matrix(select(small_val_cont, - hotel_continent, srch_destination_id))[,1:100]
X_1 = as.matrix(select(small_val_cont, - user_location_city, srch_destination_id))[,1:100]
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id, user_location_city))[,1:100]
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
lapply(1:dim(X_1)[1], function(i) {
count = X_1[i,] + 2*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
lapply(1:dim(X_1)[1], function(i) {
count = 0.1815508*X_1[i,] + 0.3121058*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
library(data.table)
View(train)
n = 5e6
train <- fread("/Users/alexpapiu/Documents/Data/Expedia/train.csv", nrow = n)
n = 5e6
train <- fread("/Users/alexpapiu/Documents/Data/Expedia/train.csv", nrow = n)
sample = (1:n, n/4)
sample = (1:n, n/4)
sample(1:n, n/4)
val = train[sample(1:n, n/4),]
sam = sample(1:n, n/4)
set.seed(1243)
sam = sample(1:n, n/4)
set.seed(1243)
sam = sample(1:n, n/4)
val = train[sam,]
train = train[-sam,]
set.seed(1243)
sam = sample(1:n, n/8)
val = train[sam,]
train = train[-sam,]
#top clusters for given feature:
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
#preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
truth = as.list(val$hotel_cluster) #we need this for the validation
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
#preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
small_val <- select(val, srch_destination_id, user_location_city)
#top counts for different variables:
train %>%
count(user_location_city, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> hotel_continent
small_val_cont <- right_join(hotel_continent, small_val,
by = "user_location_city")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
spread(hotel_cluster, n, fill = 0) -> srch_destination_id
small_val_srch_id <- right_join(srch_destination_id, small_val,
by = "srch_destination_id")
X_1 = as.matrix(select(small_val_cont, - user_location_city, srch_destination_id))[,1:100]
X_2 = as.matrix(select(small_val_srch_id, - srch_destination_id, user_location_city))[,1:100]
X_1 = X_1/rowSums(X_1)
X_2 = X_2/rowSums(X_2)
lapply(1:dim(X_1)[1], function(i) {
count = 0.1815508*X_1[i,] + 0.3121058*X_2[i,]
sort(count, decreasing = TRUE)[1:5] %>% names() %>% as.numeric()
}) -> preds
mapk(5, truth, preds) #the metric for the competition
train <- fread("/Users/alexpapiu/Documents/Data/Expedia/train.csv", nrow = n)
test <- fread("/Users/alexpapiu/Documents/Data/Expedia/test.csv")
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
right_join(top_5, temp, by = "srch_destination_id") -> temp
right_join(top_5, test, by = "srch_destination_id") -> temp
View(temp)
preds <-  temp[,2:6]
View(preds)
sample <- fread("/Users/alexpapiu/Downloads/sample_submission.csv")
View(sample)
str(sample)
toString(preds[1,])
paste(preds[1,])
paste0(preds[1,])
paste0(preds[1,], collapse = " ")
paste(preds[1,], collapse = " ")
apply(preds, 1, function(x) {
paste(x, collapse = " ")
}) -> new_preds
new_preds
new_preds[1:10]
gsub(pattern = "NA", replacement = "1", x = new_preds[1:10])
table(train$hotel_cluster)  %>% sort()
gsub(pattern = "NA", replacement = "91", x = new_preds[1:10])
sample[1,1]
sample[1,]
sample$hotel_cluster[1:10]
gsub(pattern = "NA", replacement = "91", x = new_preds) -> solution
dim(test)[1]
colnames(sample)
solution = data.frame(id = 0:dim(test)[1]-1, hotel_cluster = solution)
solution = data.frame(id = sample$id, hotel_cluster = solution)
View(solution)
dir()
fwrite(solution, "first_try.csv")
View(test)
n = 1e6
train <- fread("/Users/alexpapiu/Documents/Data/Expedia/train.csv", nrow = n)
View(train)
names(train)
train %>%
mutate(year = date_time) -> train
View(train)
library(lubridate)
train %>%
mutate(year = year(date_time),
month = month(date_time)) -> train
train$year %>% unique()
table(train$year)
table(train$month)
table(train$is_booking)
book_train <- train[train$is_booking,]
View(book_train)
load("/Users/alexpapiu/Documents/Data/expedia.RData")
truth = as.list(val$hotel_cluster) #we need this for the validation
table(val$is_booking)
val = val[val$is_booking, ]
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
truth = as.list(val$hotel_cluster) #we need this for the validation
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
#preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
val = val[val$is_booking, ]
truth = as.list(val$hotel_cluster) #we need this for the validation
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
#preds_city <- temp[,2:6]
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
library(data.table)
library(dplyr)
library(tidyr)
library(Metrics)
load("/Users/alexpapiu/Documents/Data/expedia.RData")
train %>% count(srch_destination_id) %>% arrange(desc(n)) -> dest
#top clusters for given feature:
train %>%
count(srch_destination_id, hotel_cluster) %>%
arrange(desc(n)) %>%
top_n(5, n) %>%
mutate(obs = paste0("y_", 1:n())) %>%
select(-n) %>%
spread(obs, hotel_cluster) %>%
select(srch_destination_id, y_1, y_2, y_3, y_4, y_5) -> top_5
val = val[val$is_booking, ]
truth = as.list(val$hotel_cluster) #we need this for the validation
length(truth)
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
truth[1:10]
View(val)
load("/Users/alexpapiu/Documents/Data/expedia.RData")
names(val)
val = filter(val, is_booking == TRUE)
truth = as.list(val$hotel_cluster) #we need this for the validation
#for validation set:
right_join(top_5, val, by = "srch_destination_id") -> temp
preds <-  temp[,2:6]
as.list(as.data.frame(t(preds))) -> preds #converts to a list
mapk(5, truth, preds) #the metric for the competition
truth[1:10]
preds[1:10]
